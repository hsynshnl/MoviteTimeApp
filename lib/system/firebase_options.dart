// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions web = FirebaseOptions(
    apiKey: dotenv.env['FIREBASE_API_KEY'] ?? 'API_KEY_NOT_FOUND',
    appId: dotenv.env['FIREBASE_APPID'] ?? 'APP_ID_NOT_FOUND',
    messagingSenderId: dotenv.env['FIRE_BASE_MESSAGING'] ?? 'NOT_FOUND',
    projectId: dotenv.env['FIRE_BASE_PROJECTID'] ?? 'PROJECT_ID_NOT_FOUND',
    authDomain: dotenv.env['FIRE_BASE_AUTHDOMAIN'] ?? 'AUTH_DOMAIN_NOT_FOUND',
    storageBucket:
        dotenv.env['FIRE_BASE_STORAGEBUCKET'] ?? 'STORAGEBUCKET_NOT_FOUND',
  );

  static FirebaseOptions android = FirebaseOptions(
    apiKey: dotenv.env['FIREBASE_API_KEY'] ?? 'API_KEY_NOT_FOUND',
    appId: dotenv.env['FIREBASE_APPID'] ?? 'APP_ID_NOT_FOUND',
    messagingSenderId: dotenv.env['FIRE_BASE_MESSAGING'] ?? 'NOT_FOUND',
    projectId: dotenv.env['FIRE_BASE_PROJECTID'] ?? 'PROJECT_ID_NOT_FOUND',
    authDomain: dotenv.env['FIRE_BASE_AUTHDOMAIN'] ?? 'AUTH_DOMAIN_NOT_FOUND',
    storageBucket:
        dotenv.env['FIRE_BASE_STORAGEBUCKET'] ?? 'STORAGEBUCKET_NOT_FOUND',
  );
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    // ignore: missing_enum_constant_in_switch
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for ios - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
    }

    throw UnsupportedError(
      'DefaultFirebaseOptions are not supported for this platform.',
    );
  }
}
